Dependency Injection and Mocking
Tools for writing maintainable, testable code
12:00 3 Jul 2018

Jacob H. Haven
jacob@jhaven.me

* What is Dependency Injection?

Applying service-oriented architecture to writing code.

- Each "service" is an object providing a set of functions to its "clients".
- Services are black boxed, with only their outward interfaces known to their clients.
- Clients are initialized with the set of services they depend on instead of creating those dependencies themselves.

* Why is Dependency Injection?

- Reduces system complexity by seperating service implementations from where they're used
- Client only need to / can know the outward interface of a service, not what's going on under the hood.
- A service can be replaced with new service satisfying the same interface, without affecting clients.

* Where is Dependency Injection?

Everywhere! Our code base is very modular, with functions grouped into services and exposed through interfaces used by various clients.

* What is Mocking?

.image mockingbird.jpg _ 300

Mocking is the act of implementing a service's interface with a "dummy" implementation and then injecting that dependency into the client you're interested in. It can be very useful for unit testing, as it allows you to test a component in isolation, without worrying about the behaviors and initialization of all its dependecies.

* Custom Mocks

The simplest way to mock a service is to create a hand-crafted object that implements its interface, inject it into the component your testing.

- Very flexible testing, as you can define the behavior of your mock the same as any other service.
- Time consuming, as you have to write a full mock for each dependency.
- Custom mocks are often inconsitent with each other in their behavior, as they are often only written to satisfy a one-off testcase.

* Autogenerated Mocks

There are tools, such as gomock to generate code that satisfies a known service interface.
.link https://github.com/golang/mock gomock

- These have rigid, consistent implementations that allow the writing of consistent tests.
- Built to be as generic as possible to satisfy the most use-cases
- Many built-in features to make writing tests easier.

* Example Service

.code pkg/db/user_store.go

* Example Test

.code user_store_test.go /^func TestUserStore/,/^}/